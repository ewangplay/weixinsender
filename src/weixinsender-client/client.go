// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"jzlservice/weixinsender"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string ping()")
	fmt.Fprintln(os.Stderr, "  string getAccessToken(string appid, string appsecret)")
	fmt.Fprintln(os.Stderr, "  string addKFAccount(string access_token, string kfaccount, string nickname, string password)")
	fmt.Fprintln(os.Stderr, "  string updateKFAccount(string access_token, string kfaccount, string nickname, string password)")
	fmt.Fprintln(os.Stderr, "  string deleteKFAccount(string access_token, string kfaccount, string nickname, string password)")
	fmt.Fprintln(os.Stderr, "  string setKFHeadImg(string access_token, string kfaccount, string media_file)")
	fmt.Fprintln(os.Stderr, "  string getKFAccountList(string access_token)")
	fmt.Fprintln(os.Stderr, "  string sendMessage(string access_token, string touser, string type, string data, string kfaccount)")
	fmt.Fprintln(os.Stderr, "  string uploadTempMedia(string access_token, string type, string media_file)")
	fmt.Fprintln(os.Stderr, "  string downloadTempMedia(string access_token, string media_id)")
	fmt.Fprintln(os.Stderr, "  string uploadPermanentMedia(string access_token, string type, string media_file)")
	fmt.Fprintln(os.Stderr, "  string downloadPermanentMedia(string access_token, string media_id)")
	fmt.Fprintln(os.Stderr, "  string deletePermanentMedia(string access_token, string media_id)")
	fmt.Fprintln(os.Stderr, "  string uploadNews(string access_token, string news)")
	fmt.Fprintln(os.Stderr, "  string sendNews(string access_token, bool is_to_all, string group_id, string msg_type, string content)")
	fmt.Fprintln(os.Stderr, "  string deleteNews(string access_token, string msg_id)")
	fmt.Fprintln(os.Stderr, "  string previewNews(string access_token, string touser, string msg_type, string content)")
	fmt.Fprintln(os.Stderr, "  string getNewsStatus(string access_token, string msg_id)")
	fmt.Fprintln(os.Stderr, "  string createUserGroup(string access_token, string group_name)")
	fmt.Fprintln(os.Stderr, "  string updateUserGroup(string access_token, string group_id, string new_group_name)")
	fmt.Fprintln(os.Stderr, "  string getUserGroupList(string access_token)")
	fmt.Fprintln(os.Stderr, "  string getUserGroupByOpenID(string access_token, string openid)")
	fmt.Fprintln(os.Stderr, "  string moveUserToGroup(string access_token,  openid_list, string to_groupid)")
	fmt.Fprintln(os.Stderr, "  string remarkUser(string access_token, string openid, string remark)")
	fmt.Fprintln(os.Stderr, "  string getUserInfo(string access_token, string openid)")
	fmt.Fprintln(os.Stderr, "  string getUserList(string access_token, string next_openid)")
	fmt.Fprintln(os.Stderr, "  string createMenu(string access_token, string menu_data)")
	fmt.Fprintln(os.Stderr, "  string deleteMenu(string access_token)")
	fmt.Fprintln(os.Stderr, "  string getMenu(string access_token)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := weixinsender.NewWeixinSenderClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Ping())
		fmt.Print("\n")
		break
	case "getAccessToken":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetAccessToken requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetAccessToken(value0, value1))
		fmt.Print("\n")
		break
	case "addKFAccount":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AddKFAccount requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.AddKFAccount(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "updateKFAccount":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "UpdateKFAccount requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.UpdateKFAccount(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteKFAccount":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeleteKFAccount requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.DeleteKFAccount(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "setKFHeadImg":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SetKFHeadImg requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.SetKFHeadImg(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getKFAccountList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetKFAccountList requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetKFAccountList(value0))
		fmt.Print("\n")
		break
	case "sendMessage":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "SendMessage requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.SendMessage(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "uploadTempMedia":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UploadTempMedia requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UploadTempMedia(value0, value1, value2))
		fmt.Print("\n")
		break
	case "downloadTempMedia":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DownloadTempMedia requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DownloadTempMedia(value0, value1))
		fmt.Print("\n")
		break
	case "uploadPermanentMedia":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UploadPermanentMedia requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UploadPermanentMedia(value0, value1, value2))
		fmt.Print("\n")
		break
	case "downloadPermanentMedia":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DownloadPermanentMedia requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DownloadPermanentMedia(value0, value1))
		fmt.Print("\n")
		break
	case "deletePermanentMedia":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeletePermanentMedia requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DeletePermanentMedia(value0, value1))
		fmt.Print("\n")
		break
	case "uploadNews":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UploadNews requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		fmt.Print(client.UploadNews(value0, value1))
		fmt.Print("\n")
		break
	case "sendNews":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "SendNews requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2) == "true"
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.SendNews(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "deleteNews":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DeleteNews requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.DeleteNews(value0, value1))
		fmt.Print("\n")
		break
	case "previewNews":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "PreviewNews requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.PreviewNews(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getNewsStatus":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetNewsStatus requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetNewsStatus(value0, value1))
		fmt.Print("\n")
		break
	case "createUserGroup":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateUserGroup requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.CreateUserGroup(value0, value1))
		fmt.Print("\n")
		break
	case "updateUserGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateUserGroup requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UpdateUserGroup(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getUserGroupList":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetUserGroupList requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetUserGroupList(value0))
		fmt.Print("\n")
		break
	case "getUserGroupByOpenID":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserGroupByOpenID requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetUserGroupByOpenID(value0, value1))
		fmt.Print("\n")
		break
	case "moveUserToGroup":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MoveUserToGroup requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg120 := flag.Arg(2)
		mbTrans121 := thrift.NewTMemoryBufferLen(len(arg120))
		defer mbTrans121.Close()
		_, err122 := mbTrans121.WriteString(arg120)
		if err122 != nil {
			Usage()
			return
		}
		factory123 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt124 := factory123.GetProtocol(mbTrans121)
		containerStruct1 := weixinsender.NewMoveUserToGroupArgs()
		err125 := containerStruct1.ReadField2(jsProt124)
		if err125 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.OpenidList
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.MoveUserToGroup(value0, value1, value2))
		fmt.Print("\n")
		break
	case "remarkUser":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "RemarkUser requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.RemarkUser(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getUserInfo":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserInfo requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetUserInfo(value0, value1))
		fmt.Print("\n")
		break
	case "getUserList":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetUserList requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.GetUserList(value0, value1))
		fmt.Print("\n")
		break
	case "createMenu":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateMenu requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := []byte(flag.Arg(2))
		value1 := argvalue1
		fmt.Print(client.CreateMenu(value0, value1))
		fmt.Print("\n")
		break
	case "deleteMenu":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteMenu requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.DeleteMenu(value0))
		fmt.Print("\n")
		break
	case "getMenu":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMenu requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetMenu(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
